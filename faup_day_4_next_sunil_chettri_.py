# -*- coding: utf-8 -*-
"""FAUP Day 4 next Sunil Chettri .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tdVI37xFZ8ALn72FC2UcLL3Dt-uW6PQZ
"""

# Import required libraries
import io
import numpy as np
import pandas as pd
from copy import deepcopy
from google.colab import files

# Import plotting libraries
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

uploaded = files.upload()

isl_df = pd.read_csv(io.BytesIO(uploaded['isl_player_final.csv']))
isl_df

isl_df.info() # info() gives us how many columns, entries, memory usage etc.

isl_df.describe().round(1)

isl_df[(isl_df["minutes_played"] > 1500) & (isl_df["country_id"] == 1)].shape

isl_df[(isl_df["country_id"] == 1) & (isl_df["position_id"] == 2)]

indian_forwards = deepcopy(isl_df[(isl_df["country_id"] == 1) & (isl_df["position_id"] == 2)]) # deepcopy makes an copy of entire dataframe if we dont want to do extra memory usage.

indian_forwards.reset_index(drop=True, inplace=True) # we reset index in an order
indian_forwards

indian_forwards[indian_forwards["name"].str.contains("Sunil")] # partial string search i.e. str.contais inplace of ==

indian_forwards[indian_forwards["name"].str.contains("Singh")] # lots of player named singh

"""Level the playing field"""

fwd_mins_df = indian_forwards.groupby(["id", "name"])["minutes_played"].sum().reset_index()
fwd_mins_df

px.bar(x="name", y="minutes_played", text="minutes_played", data_frame=fwd_mins_df)

indian_forwards["goalsper90"] = indian_forwards["events.goals"].divide(indian_forwards["minutes_played"]).multiply(90)

indian_forwards = indian_forwards[indian_forwards["minutes_played"]>0]

indian_forwards["assistsPer90"] = indian_forwards["events.assists"].divide(indian_forwards["minutes_played"]).multiply(90)
indian_forwards["shots_on_targetPer90"] = indian_forwards["events.shots_on_target"].divide(indian_forwards["minutes_played"]).multiply(90)

per90Cols = ["events.goals", "events.assists", "events.shots", "events.shots_on_target", "events.chances_created",
             "events.fouls_suffered", "touches.total", 'touches.aerial_duel.won']
for col in per90Cols:
    indian_forwards[col + "Per90"] = indian_forwards[col].divide(indian_forwards["minutes_played"]).multiply(90)

cols_for_radar = []
for i in per90Cols:
    cols_for_radar.append(i + "Per90")
print(cols_for_radar)

# Use list comprehension
[i + "Per90" for i in per90Cols]
print(cols_for_radar)

indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum()

"""Chhetri's Performance
Radar plot - A Radar Chart (also known as a spider plot or star plot) displays multivariate data in the form of a two-dimensional chart of quantitative variables represented on axes originating from the center. The relative position and angle of the axes is typically uninformative.
"""

df = pd.DataFrame(dict(
    r=[1, 5, 2, 2, 3],
    theta=['processing cost','mechanical properties','chemical stability',
           'thermal stability', 'device integration']))
fig = px.line_polar(df, r='r', theta='theta', line_close=True)
fig.show()

indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum()

fig = px.line_polar(indian_forwards, r=indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum(),
                    theta=cols_for_radar, line_close=True)
fig.update_traces(fill='toself')
fig.show()

from sklearn.preprocessing import MinMaxScaler # Normalization of values
scaler = MinMaxScaler()
indian_forwards[cols_for_radar] = scaler.fit_transform(indian_forwards[cols_for_radar])

indian_forwards.head()

"""Normalized Radar Plot for Chhetri's Performance"""

fig = px.line_polar(indian_forwards, r = indian_forwards.loc[(indian_forwards["id"] == 19150),  cols_for_radar ].sum(), theta=cols_for_radar, line_close=True)
fig.update_traces(fill='toself')
fig.show()

"""The Other Players"""

indian_forwards[indian_forwards["name"].str.contains("Manvir")]

df

for i, row in indian_forwards.iterrows():
  print("Index location -->", i, "\n")
  print(row.values, "\n")

for i, row in indian_forwards.iterrows():
    print(row["name"])
    fig = px.line_polar(indian_forwards, r=indian_forwards.loc[(indian_forwards["id"] == row["id"]), cols_for_radar].sum(),
                        theta=cols_for_radar, line_close=True,
                        title=row["name"])b
    fig.update_traces(fill='toself')
    fig.show()

"""The Replacement
We will use something called as "Multiple Trace Radar Chart" to perform comparative analysis.
"""

ind_fwds_id_names = indian_forwards.drop_duplicates(subset=["id"])[["id", "name"]]

ind_fwds_id_names.shape

ind_fwds_id_names.head()

indian_forwards[cols_for_radar].max().max()

isl_max = indian_forwards[cols_for_radar].max().max()

import plotly.graph_objects as go

for i, row in ind_fwds_id_names.iterrows():
  if row["id"] == 19150:
    continue
  print(row["name"])
  # Initiate the plotly go figure
  fig = go.Figure()
  # Add radar plots for differnt players:
  fig.add_trace(go.Scatterpolar(
      r = indian_forwards.loc[(indian_forwards["id"] == row["id"]), cols_for_radar].sum(),
      theta = cols_for_radar,
      fill = 'toself',
      name = row["name"]))
  # Additional properties of plot
  fig.update_layout(
      title = "Sunil Chettri vs" + row["name"],
  polar = dict(radialaxis = dict(visible=True, range=[0, isl_max])),
  showlegend=True
  )
  fig.show()

