# -*- coding: utf-8 -*-
"""FAUP Mega Webinar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NGadvHXaC28bYZmipAKOZ-2LJUMzYr3k

MESSI VS RONALDO (GOAT VS GOAT)
Getting previous 7 seaons data(only league, not fair comparison ) from understat.
"""

# Importing required libraries
import json
import pandas as pd
from bs4 import BeautifulSoup
from urllib.request import urlopen

# Import plotting libraries:
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

"""CR7 Data

"""

# Scrape Cristiano player stats:
cris_scrape_url = "https://understat.com/player/2371"
page_connect = urlopen(cris_scrape_url)
page_html = BeautifulSoup(page_connect, "html.parser")

json_raw_string = page_html.findAll(name="script")[1].text
start_ind = json_raw_string.index("\\")
stop_ind = json_raw_string.index("')")

json_data = json_raw_string[start_ind:stop_ind]
json_data = json_data.encode("utf8").decode("unicode_escape")

cris_season_wise_meta_df = pd.json_normalize(json.loads(json_data)["season"])
cris_season_wise_meta_df.insert(0, "Player", "Cristiano")

cris_season_wise_meta_df

# Scrape Cristiano shot data:
json_raw_string = page_html.findAll(name="script")[3].text
start_ind = json_raw_string.index("\\")
stop_ind = json_raw_string.index("')")

json_data = json_raw_string[start_ind:stop_ind]
json_data = json_data.encode("utf8").decode("unicode_escape")

cris_shots_df = pd.json_normalize(json.loads(json_data))
cris_shots_df.insert(0, "Player", "Cristiano")

cris_shots_df

cris_shots_df.shape # Hence 1369 shots taken by cr7 in previous 7 seasons.

"""LEO MESSI Data"""

# Scrape Messi player stats:
messi_scrape_url = "https://understat.com/player/2097"
page_connect = urlopen(messi_scrape_url)
page_html = BeautifulSoup(page_connect, "html.parser")

json_raw_string = page_html.findAll(name="script")[1].text
start_ind = json_raw_string.index("\\")
stop_ind = json_raw_string.index("')")

json_data = json_raw_string[start_ind:stop_ind]
json_data = json_data.encode("utf8").decode("unicode_escape")

messi_season_wise_meta_df = pd.json_normalize(json.loads(json_data)["season"])
messi_season_wise_meta_df.insert(0, "Player", "Messi")

messi_season_wise_meta_df

"""Messi's Shots Data"""

json_raw_string = page_html.findAll(name="script")[3].text
start_ind = json_raw_string.index("\\")
stop_ind = json_raw_string.index("')")

json_data = json_raw_string[start_ind:stop_ind]
json_data = json_data.encode("utf8").decode("unicode_escape")

messi_shots_df = pd.json_normalize(json.loads(json_data))
messi_shots_df.insert(0, "Player", "Messi")

messi_shots_df

messi_shots_df.shape # Messi has 1258 shots taken in previous 7 sesons.

cris_season_wise_meta_df.drop(index=[0])

cris_season_wise_meta_df.reset_index(drop=True, inplace=True)

"""Joint Season-wise Data"""

season_wise_meta_df = cris_season_wise_meta_df.append(messi_season_wise_meta_df)
season_wise_meta_df # will soe both leo and cr7 data due to appned attribue.

"""Joint Shots Data"""

cris_shots_df.tail()

cris_shots_df.drop(index=[1342])

cris_shots_df.drop(index=[1342], inplace=True)

shots_df = cris_shots_df.append(messi_shots_df)
shots_df

shots_df.shape # Both messi and ronaldo has taken total of 2625 shots in last 7 seasons.

"""Remove current season data"""

season_wise_meta_df = season_wise_meta_df[season_wise_meta_df["season"] != "2021"].copy(deep=True)

shots_df = shots_df[shots_df["season"] != "2021"].copy(deep=True)

season_wise_meta_df["season"].unique()

shots_df["season"].unique()

"""Data Cleaning and EDA"""

# On season-wise data
season_wise_meta_df.describe(include="all")

season_wise_meta_df.info()

season_wise_meta_df["goals"].sum() # sum function has joined strings so it is incorrect

type(season_wise_meta_df["goals"].sum())

season_wise_meta_df.apply(pd.to_numeric, errors="ignore") # now converting string values to mathematical so that we can apply mathematical functions such as sum.

season_wise_meta_df = season_wise_meta_df.apply(pd.to_numeric, errors="ignore")

season_wise_meta_df.info() # so many of the things has changed to int.

season_wise_meta_df["goals"].sum()

type(season_wise_meta_df["goals"].sum())

season_wise_meta_df = season_wise_meta_df.round(2) # sarts cr7 index by 2 instead of 7

season_wise_meta_df

season_wise_meta_df.describe(percentiles=[]).round(1) # Both cr7 and messi has scored goals of 32 in 33 matches which is absolutely amazing of these 2 goats.
# Min scored by these players in a season is 21 which was by cr7 in 2018/19.
# Max scored by these players in a season is 48 which was by cr7 in 2014/15.

shots_df.head()

pd.set_option("display.max_rows", 120)

season_wise_meta_df.groupby(["Player"]).describe(percentiles=[]).T.round(1) 
# Cr7 has played avg of 32 games and scored avg of 30.7 goal and has sassisted 7.7 on avg whereas messis has played avg of 34.7 and scored avg of 33.0 goals and 13.9 assists

"""On Shots Data"""

shots_df.info() # Everything such as minute season is object so we will convert it into int

shots_df= shots_df.apply(pd.to_numeric, errors="ignore")

shots_df = shots_df.round(2)

shots_df.describe(percentiles=[]).round()

shots_df

"""Comparative Analysis
On Season-wise Data
"""

season_wise_meta_df.select_dtypes(exclude=[object]).columns

num_cols = season_wise_meta_df.select_dtypes(exclude=[object]).columns

num_cols

num_cols.__len__()

len(num_cols)

season_wise_meta_df.groupby(["Player"])[num_cols].sum()

season_wise_meta_df.groupby(["Player"])[num_cols].sum().reset_index()

total_df = season_wise_meta_df.groupby(["Player"])[num_cols].sum().round(1).reset_index()

total_df # Messi has more goals than ronaldo in leagues but he has less taken shots because ronaldo is more kinfd of a poacher or striker in front of goal.

"""CA on totals (COnsolidated for all season per player"""

# Since we have 15 cols of graph so we have created a subplot

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=3, cols=5,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=num_cols)
# Add bar plot for goals conceded in all subplots:
for col in num_cols:
    fig.add_trace(go.Bar(x=total_df["Player"],
                        y=total_df[col],
                        text=total_df[col],
                        textposition="inside",
                        name=col),
                row=i, col=j)
    j += 1
    if j > 5:
        j = 1
        i += 1
fig.update_layout(height=800)
fig.show()
# xG is expected goals
# Both messi and ronaldo ahs outperformed their xG hence proved they are really on aleague of their own because outperforming xG is very diificult.

"""NOTE: On xGChain and xGBuildup \\
xGChain --> Calculating xG for possessions that lead to a shot where the player was involved at least once in that possession, 
\**INCLUDING** the final pass or the shot. \\
xGBuildup --> Calculating xG for possessions that lead to a shot where the player was involved at least once in that possession, 
**EXCLUDING** the final pass or the shot. \\

Feature Engineering
"""

season_wise_meta_df.columns

season_wise_meta_df["xGDiff"] = season_wise_meta_df["goals"].sub(season_wise_meta_df["xG"]).round(2)

season_wise_meta_df["goal_contrib"] = season_wise_meta_df["goals"].add(season_wise_meta_df["assists"]).round(1)

season_wise_meta_df["xgoal_contrib"] = season_wise_meta_df["xG"].add(season_wise_meta_df["xA"]).round(1)

season_wise_meta_df["shot_contrib"] = season_wise_meta_df[["shots", "key_passes", "assists"]].sum(axis=1).round(1)

num_cols = num_cols.tolist() + ["xGDiff", "goal_contrib", "xgoal_contrib", "shot_contrib"]

num_cols

num_cols = [col for col in num_cols if col not in ["season", "yellow", "red", "games"]]

num_cols

total_df = season_wise_meta_df.groupby(["Player"])[num_cols].sum().round(1).reset_index()

num_cols.__len__()

"""CA on Totals updated"""

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=3, cols=5,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=num_cols)
# Add bar plot for goals conceded in all subplots:
for col in num_cols:
    fig.add_trace(go.Bar(x=total_df["Player"],
                        y=total_df[col],
                        text=total_df[col],
                        textposition="inside",
                        name=col),
                row=i, col=j)
    j += 1
    if j > 5:
        j = 1
        i += 1
fig.update_layout(height=800)
fig.show()

"""Per 90 Stats"""

for col in num_cols:
    total_df[col + "_p90"] = total_df[col].divide(total_df["time"]).multiply(90).round(2)

per_90_cols = [col + "_p90" for col in num_cols if col != "time"]

len(per_90_cols)

"""CA on Totals Updated"""

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=3, cols=5,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=per_90_cols)
# Add bar plot for goals conceded in all subplots:
for col in per_90_cols:
    fig.add_trace(go.Bar(x=total_df["Player"],
                        y=total_df[col],
                        text=total_df[col],
                        textposition="inside",
                        name=col),
                row=i, col=j)
    j += 1
    if j > 5:
        j = 1
        i += 1
fig.update_layout(height=800)
fig.show()
# Both Messi and ronaldo has 1 goal per 90 mins which is incredible
# Messi XGper90 is very high which shoes he his superhuman

### CA on Season-wise stats (Consolidated data per season per player)

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=3, cols=5,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=num_cols)
# Add bar plot for goals conceded in all subplots:
for col in num_cols:
    cris_plot_data = season_wise_meta_df.loc[season_wise_meta_df["Player"] == "Cristiano"]
    fig.add_trace(go.Bar(x=cris_plot_data["season"],
                         y=cris_plot_data[col],
                         text=cris_plot_data[col],
                         textposition="inside",
                         name=col + "(Cris)"),
                row=i, col=j)
    messi_plot_data = season_wise_meta_df.loc[season_wise_meta_df["Player"] == "Messi"]
    fig.add_trace(go.Bar(x=messi_plot_data["season"],
                        y=messi_plot_data[col],
                        text=messi_plot_data[col],
                        textposition="inside",
                        name=col + "(Messi)"),
            row=i, col=j)

    j += 1
    if j > 5:
        j = 1
        i += 1
fig.update_layout(height=800, barmode="stack")
fig.show()

"""Per 90 Stats Season Wise"""

for col in num_cols:
    season_wise_meta_df[col + "_p90"] = season_wise_meta_df[col].divide(season_wise_meta_df["time"]).multiply(90).round(2)

per_90_cols = [col + "_p90" for col in num_cols if col != "time"]

len(per_90_cols)

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=3, cols=5,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=per_90_cols)
# Add bar plot for goals conceded in all subplots:
for col in per_90_cols:
    cris_plot_data = season_wise_meta_df.loc[season_wise_meta_df["Player"] == "Cristiano"]
    fig.add_trace(go.Bar(x=cris_plot_data["season"],
                         y=cris_plot_data[col],
                         text=cris_plot_data[col],
                         textposition="inside",
                         name=col + "(Cris)"),
                row=i, col=j)
    messi_plot_data = season_wise_meta_df.loc[season_wise_meta_df["Player"] == "Messi"]
    fig.add_trace(go.Bar(x=messi_plot_data["season"],
                        y=messi_plot_data[col],
                        text=messi_plot_data[col],
                        textposition="inside",
                        name=col + "(Messi)"),
            row=i, col=j)

    j += 1
    if j > 5:
        j = 1
        i += 1
fig.update_layout(height=800, barmode="stack")
fig.show()

"""On Shots Data

CA on Totals
"""

shots_df.head()

shots_df["result"].unique()

shots_df.columns

shot_cols = ["result", "situation", "shotType"]

plot_df = shots_df.groupby(["Player", "result"]).agg({"result": "count"})

plot_df.name = "total"

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=1, cols=3,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=shot_cols)
# Add bar plot for goals conceded in all subplots:
for col in shot_cols:
    fig.add_trace(go.Histogram(x=cris_shots_df[col],
                               text=cris_shots_df[col],
                               name=col + "(Cris)"),
                  row=i, col=j)
    fig.add_trace(go.Histogram(x=messi_shots_df[col],
                            text=messi_shots_df[col],
                            name=col + "(Messi)"),
                row=i, col=j)

    j += 1
    if j > 3:
        j = 1
        i += 1
fig.update_layout(height=400, barmode="group")
fig.show()
# Below bar graph shows that cr7 is a more lethal in air and can also score with his weak foot bit messi has more accuracy and his freekicks are also more conversion to goal.

"""CA on per 90"""

cris_time = total_df.loc[total_df["Player"] == "Cristiano", "time"].item()
messi_time = total_df.loc[total_df["Player"] == "Messi", "time"].item()

cris_time

cris_shots_df["result"].value_counts().reset_index()

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=1, cols=3,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=shot_cols)
# Add bar plot for goals conceded in all subplots:
for col in shot_cols:
    cris_plot_df = cris_shots_df[col].value_counts().reset_index()
    cris_plot_df[col + "_p90"] = cris_plot_df[col].divide(cris_time).multiply(90).round(1)
    fig.add_trace(go.Bar(x=cris_plot_df["index"],
                         y=cris_plot_df[col + "_p90"],
                         text=cris_plot_df[col + "_p90"],
                         textposition="inside",
                         name=col),
                  row=i, col=j)

    messi_plot_df = messi_shots_df[col].value_counts().reset_index()
    messi_plot_df[col + "_p90"] = messi_plot_df[col].divide(messi_time).multiply(90).round(1)
    fig.add_trace(go.Bar(x=messi_plot_df["index"],
                         y=messi_plot_df[col + "_p90"],
                         text=messi_plot_df[col + "_p90"],
                         textposition="inside",
                         name=col),
                  row=i, col=j)

    j += 1
    if j > 3:
        j = 1
        i += 1
fig.update_layout(height=400, barmode="group")
fig.show()
# CR7 more accurate in penalty whereas messi more accurate in freekicks.

"""CA on percentages"""

i = j = 1
# Create an empty subplot:
fig = make_subplots(rows=1, cols=3,
                    shared_xaxes=False,
                    vertical_spacing=0.1,
                    subplot_titles=shot_cols)
# Add bar plot for goals conceded in all subplots:
for col in shot_cols:
    cris_plot_df = cris_shots_df[col].value_counts(normalize=True).multiply(100).round(1).reset_index()
    fig.add_trace(go.Bar(x=cris_plot_df["index"],
                         y=cris_plot_df[col],
                         text=cris_plot_df[col].apply(lambda x: '{0:1.2f}%'.format(x)),
                         textposition="inside",
                         name=col + "(Cris)"),
                  row=i, col=j)

    messi_plot_df = messi_shots_df[col].value_counts(normalize=True).multiply(100).round(1).reset_index()
    fig.add_trace(go.Bar(x=messi_plot_df["index"],
                         y=messi_plot_df[col],
                         text=messi_plot_df[col].apply(lambda x: '{0:1.2f}%'.format(x)),
                         textposition="inside",
                         name=col+ "(Messi)"),
                  row=i, col=j)

    j += 1
    if j > 3:
        j = 1
        i += 1
fig.update_layout(height=400, barmode="group",
                  plot_bgcolor="#383838",
                  template="plotly_dark") # Dark theme
fig.update_xaxes(showgrid=False)
fig.update_yaxes(showgrid=False)
fig.show()
# Dark theme 
# Percentage goal of messi is more than ronaldo and messi scores more from its left foot, CR7 scores from his both left foot and is incredible in headers

cris_shots_df.shape

"""Trivia Time"""

fig = px.histogram(data_frame=shots_df, x="player_assisted", color="Player",
             barmode="group", title="Assisting Player Comparison",
             labels={"result": "", "count": ""})
fig.update_layout(xaxis={"tickmode": "linear"})
# Kroos has assisted more to cr7 and suarez has assisted more to leo messi

"""Shot analysis"""

# Data markdown

!pip install mplsoccer

import mplsoccer

pitch = mplsoccer.Pitch(pitch_type="wyscout")
fig, ax = pitch.draw(figsize = (14,6))

shots_df["X"] = shots_df["X"].multiply(100)
shots_df["Y"] = shots_df["Y"].multiply(100)

crisPlotData = shots_df[shots_df["Player"] == "Cristiano"].copy(deep=True)

# Plot HeatMaps

from scipy.ndimage import gaussian_filter

pitch = mplsoccer.VerticalPitch(pitch_type="wyscout",
                                line_color='white',
                                line_zorder=2,
                                pitch_color='#101010',
                                half=True)
fig, ax = pitch.draw(figsize=(8, 8))
bin_statistic = pitch.bin_statistic(crisPlotData["X"],
                                    crisPlotData["Y"],
                                    statistic='count', bins=(35, 35))
bin_statistic['statistic'] = gaussian_filter(bin_statistic['statistic'], 1)
pcm = pitch.heatmap(bin_statistic, ax=ax,
                    cmap='hot', edgecolors='#22312b')
ax.set_title("Cristiano Shot HeatMap", fontsize=30)

pitch = mplsoccer.VerticalPitch(pitch_type="wyscout",
                                line_color='white',
                                line_zorder=2,
                                pitch_color='#101010',
                                half=True)
fig, ax = pitch.draw(figsize=(8, 8))
bin_statistic = pitch.bin_statistic(messiPlotData["X"],
                                    messiPlotData["Y"],
                                    statistic='count', bins=(35, 35))
bin_statistic['statistic'] = gaussian_filter(bin_statistic['statistic'], 1)
pcm = pitch.heatmap(bin_statistic, ax=ax,
                    cmap='hot', edgecolors='#22312b')
ax.set_title("Messi Shot HeatMap", fontsize=30)

pitch = mplsoccer.VerticalPitch(pitch_type="wyscout",
                                line_color='white',
                                line_zorder=2,
                                pitch_color='#101010',
                                half=True)
fig, axs = pitch.grid(nrows=1, ncols=2,
                     endnote_height=0.03, endnote_space=0,
                      grid_width=0.88, left=0.025,
                      title_height=0.06, title_space=0,
                      axis=False,
                      grid_height=0.86)

# Cristiano:
ax = axs["pitch"][0]
bin_statistic = pitch.bin_statistic(crisPlotData["X"],
                                    crisPlotData["Y"],
                                    statistic='count', bins=(35, 35))
bin_statistic['statistic'] = gaussian_filter(bin_statistic['statistic'], 1)
pcm = pitch.heatmap(bin_statistic, ax=ax,
                    cmap='coolwarm', edgecolors='#22312b')
ax.set_title("Cristiano Shot HeatMap", fontsize=30)

# Messi:
ax = axs["pitch"][1]
bin_statistic = pitch.bin_statistic(messiPlotData["X"],
                                    messiPlotData["Y"],
                                    statistic='count', bins=(35, 35))
bin_statistic['statistic'] = gaussian_filter(bin_statistic['statistic'], 1)
pcm = pitch.heatmap(bin_statistic, ax=ax,
                    cmap='coolwarm', edgecolors='#22312b')
ax.set_title("Messi Shot HeatMap", fontsize=30)

